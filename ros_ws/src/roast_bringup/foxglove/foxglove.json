{
  "configById": {
    "3D!2s7hqrr": {
      "cameraState": {
        "perspective": true,
        "distance": 22.16066481993355,
        "phi": 59.99999999999717,
        "thetaOffset": 44.999999999999964,
        "targetOffset": [
          3.584015555749372,
          2.4534070958473944,
          -4.0967818239833517e-16
        ],
        "target": [
          0,
          0,
          0
        ],
        "targetOrientation": [
          0,
          0,
          0,
          1
        ],
        "fovy": 45,
        "near": 0.5,
        "far": 5000
      },
      "followMode": "follow-pose",
      "scene": {},
      "transforms": {},
      "topics": {
        "/monocular_people_tracking/markers": {
          "visible": false
        },
        "/move_base_simple/goal": {
          "visible": false
        },
        "/threat_info/visualization": {
          "visible": true
        }
      },
      "layers": {},
      "publish": {
        "type": "point",
        "poseTopic": "/move_base_simple/goal",
        "pointTopic": "/clicked_point",
        "poseEstimateTopic": "/initialpose",
        "poseEstimateXDeviation": 0.5,
        "poseEstimateYDeviation": 0.5,
        "poseEstimateThetaDeviation": 0.26179939
      },
      "imageMode": {}
    },
    "NodePlayground!43flyel": {
      "autoFormatOnSave": true,
      "selectedNodeId": "923f3856-ebda-4ef4-9e53-9272b2b38009"
    }
  },
  "globalVariables": {},
  "userNodes": {
    "6d5086bb-58ce-4813-a6d4-92cf5d3c963c": {
      "sourceCode": "import Chart from \"chart.js\";\n\n// Sample x, y coordinates\nconst x: number[] = [1, 2, 3, 4, 5];\nconst y: number[] = [2, 4, 6, 8, 10];\n\n// Get the canvas element from the HTML\nconst canvas = document.getElementById(\"myChart\") as HTMLCanvasElement;\n\n// Create a new chart instance\nconst chart = new Chart(canvas, {\n  type: \"line\",\n  data: {\n    labels: x.map((value) => value.toString()), // Use x values as labels\n    datasets: [\n      {\n        label: \"Coordinates\",\n        data: y,\n        fill: false,\n        borderColor: \"rgb(75, 192, 192)\",\n        tension: 0.1,\n      },\n    ],\n  },\n  options: {\n    scales: {\n      y: {\n        beginAtZero: true,\n      },\n    },\n  },\n});\n",
      "name": "6d5086bb"
    },
    "923f3856-ebda-4ef4-9e53-9272b2b38009": {
      "sourceCode": "import { Input, Message } from \"./types\";\nimport { buildRosMarker, MarkerTypes } from \"./markers\";\n\ntype GlobalVariables = { id: number };\n\nexport const inputs = [\"/threat_info\"];\nexport const output = \"/threat_info/visualization\";\n\ntype Marker = Message<\"visualization_msgs/Marker\">;\n\nexport default function script(\n  event: Input<\"/threat_info\">,\n  globalVars: GlobalVariables\n): Marker {\n  const marker = buildRosMarker({\n    type: MarkerTypes.CYLINDER,\n    action: 0, // Modify the marker rather than adding new ones\n    pose: event.message.threat_pose.pose,\n    header: {\n      frame_id: event.message.threat_pose.header.frame_id,\n      stamp: event.message.threat_pose.header.stamp,\n      seq: 0,\n    },\n    scale: {\n      x: 0.1,\n      y: 0.1,\n      z: 1.0,\n    },\n    color: {\n      r: 1.0,\n      g: 0.0,\n      b: 0.0,\n      a: 1.0,\n    },\n  });\n\n  return marker;\n}\n",
      "name": "threat_info_visualization.ts"
    },
    "9c33dd9d-388c-4017-9d4a-c7c13a09fc3e": {
      "sourceCode": "// The ./types module provides helper types for your Input events and messages.\nimport { Input, Message } from \"./types\";\n\n// Your script can output well-known message types, any of your custom message types, or\n// complete custom message types.\n//\n// Use `Message` to access your data source types or well-known types:\n// type Twist = Message<\"geometry_msgs/Twist\">;\n//\n// Conventionally, it's common to make a _type alias_ for your script's output type\n// and use that type name as the return type for your script function.\n// Here we've called the type `Output` but you can pick any type name.\ntype Output = {\n  hello: string;\n};\n\n// These are the topics your script \"subscribes\" to. Studio will invoke your script function\n// when any message is received on one of these topics.\nexport const inputs = [\"/input/topic\"];\n\n// Any output your script produces is \"published\" to this topic. Published messages are only visible within Studio, not to your original data source.\nexport const output = \"/studio_script/output_topic\";\n\n// This function is called with messages from your input topics.\n// The first argument is an event with the topic, receive time, and message.\n// Use the `Input<...>` helper to get the correct event type for your input topic messages.\nexport default function script(event: Input<\"/input/topic\">): Output {\n  return {\n    hello: \"world!\",\n  };\n};",
      "name": "9c33dd9d"
    }
  },
  "playbackConfig": {
    "speed": 1
  },
  "layout": {
    "direction": "row",
    "first": "3D!2s7hqrr",
    "second": "NodePlayground!43flyel",
    "splitPercentage": 39.51686417502279
  }
}
